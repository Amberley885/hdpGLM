% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/src_summaries.R
\name{plot_tau}
\alias{plot_tau}
\title{Plot tau}
\usage{
plot_tau(samples, X = NULL, W = NULL, title = NULL, true.tau = NULL,
  show.all.taus = FALSE, show.all.betas = FALSE, ncol = NULL)
}
\arguments{
\item{samples}{an output of the function \code{\link{hdpGLM}}}

\item{X}{a string vector with the name of the first-level covariates whose associated tau should be displayed}

\item{W}{a string vector with the name of a context-level covariate(s) whose linear effect will be displayed. If \code{NULL}, the linear effect tau of all context-level covariates are displayed. Note: the context-level covariate must have been included in the estimation of the model.}

\item{title}{string, title of the plot}

\item{true.tau}{a \code{data.frame} with four columns. The first must be named \code{w} and it indicates the index of each context-level covariate, starting with 0 for the intercept term. The second column named \code{beta} must contain the indexes of the betas of individual-level covariates, starting with 0 for the intercept term. The third column named \code{Parameter} must be named \code{tau<w><beta>}, where \code{w} and \code{beta} must be the actual values displayed in the columns \code{w} and \code{beta}. Finally, it must have a column named \code{True} with the true value of the parameter.}

\item{show.all.taus}{boolean, if \code{FALSE} (default) the posterior distribution of taus representing the intercept of the expectation of beta are omitted}

\item{show.all.betas}{boolean, if \code{FALSE} (default) the taus affecting only the intercept terms of the outcome variable are omitted}

\item{ncol}{number of columns of the grid. If \code{NULL}, one column is used}
}
\description{
Function to plot posterior distribution of tau
}
\examples{
set.seed(66)

n = 20    # sample size
K = 2     # number of clusters
nCov = 3  # Dx, number of ind-level covars
nCovj = 2 # Dw, number of context-level covars 
J = 15    # number of contexts

## simulating some data
sim_data = hdpGLM_simulateData(n=n, K=K, nCov=nCov, nCovj=nCovj, J=J, family='gaussian')

## estimation
mcmc    = list(burn.in=1, n.iter=50)
samples = hdpGLM(y ~ X1 + X2 + X3, y ~ W1 + W2, data=sim_data$data, mcmc=mcmc, n.display=1)


plot_tau(samples)
plot_tau(samples, ncol=2)
plot_tau(samples, X='X1')
plot_tau(samples, X='X2')
plot_tau(samples, W='W1')
plot_tau(samples, X='X1', W='W2')
plot_tau(samples, show.all.taus=TRUE)
plot_tau(samples, show.all.taus=TRUE, show.all.betas=TRUE)
plot_tau(samples, show.all.taus=TRUE, show.all.betas=TRUE, ncol=2)
plot_tau(samples, true.tau=summary(sim_data)$tau,
         show.all.taus=TRUE, show.all.betas=TRUE, ncol=2)

}
